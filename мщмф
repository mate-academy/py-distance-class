from __future__ import annotations  # For forward references in type hints
from typing import Union


class Distance:
    def __init__(self, km: float):
        """
        Initialize a Distance object with a given distance in kilometers.
        :param km: Distance in kilometers.
        """
        self.km = km

    def __str__(self) -> str:
        """
        Return a string representation of the Distance object.
        """
        return f"Distance: {self.km} kilometers."

    def __repr__(self) -> str:
        """
        Return a formal string representation of the Distance object.
        """
        return f"Distance(km={self.km})"

    def __add__(self, other: Union[Distance, int, float]) -> Distance:
        """
        Add two Distance objects or a Distance object and a numeric value.
        """
        if isinstance(other, Distance):
            return Distance(self.km + other.km)
        elif isinstance(other, (int, float)):
            return Distance(self.km + other)
        raise TypeError("Addition is only supported with Distance or numeric values.")

    def __iadd__(self, other: Union[Distance, int, float]) -> Distance:
        """
        Perform in-place addition of two Distance objects or a Distance object and a numeric value.
        """
        if isinstance(other, Distance):
            self.km += other.km
        elif isinstance(other, (int, float)):
            self.km += other
        else:
            raise TypeError("In-place addition is only supported with Distance or numeric values.")
        return self

    def __mul__(self, factor: Union[int, float]) -> Distance:
        """
        Multiply the Distance object by a numeric factor.
        """
        if isinstance(factor, (int, float)):
            return Distance(self.km * factor)
        raise TypeError("Multiplication is only supported with numeric values.")

    def __truediv__(self, divisor: Union[int, float]) -> Distance:
        """
        Divide the Distance object by a numeric divisor.
        """
        if isinstance(divisor, (int, float)):
            if divisor == 0:
                raise ZeroDivisionError("Division by zero is not allowed.")
            return Distance(round(self.km / divisor, 2))
        raise TypeError("Division is only supported with numeric values.")

    def __lt__(self, other: Union[Distance, int, float]) -> bool:
        """
        Check if the Distance object is less than another Distance object or numeric value.
        """
        return self.km < (other.km if isinstance(other, Distance) else other)

    def __le__(self, other: Union[Distance, int, float]) -> bool:
        """
        Check if the Distance object is less than or equal to another Distance object or numeric value.
        """
        return self.km <= (other.km if isinstance(other, Distance) else other)

    def __eq__(self, other: Union[Distance, int, float]) -> bool:
        """
        Check if the Distance object is equal to another Distance object or numeric value.
        """
        return self.km == (other.km if isinstance(other, Distance) else other)

    def __ne__(self, other: Union[Distance, int, float]) -> bool:
        """
        Check if the Distance object is not equal to another Distance object or numeric value.
        """
        return not self.__eq__(other)

    def __gt__(self, other: Union[Distance, int, float]) -> bool:
        """
        Check if the Distance object is greater than another Distance object or numeric value.
        """
        return self.km > (other.km if isinstance(other, Distance) else other)

    def __ge__(self, other: Union[Distance, int, float]) -> bool:
        """
        Check if the Distance object is greater than or equal to another Distance object or numeric value.
        """
        return self.km >= (other.km if isinstance(other, Distance) else other)
